<?php

/*
 * This file is part of the FOSHttpCacheBundle package.
 *
 * (c) FriendsOfSymfony <http://friendsofsymfony.github.com/>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace FOS\HttpCacheBundle\Tests\Unit\Command;

use FOS\HttpCache\CacheInvalidator;
use FOS\HttpCacheBundle\CacheManager;
use FOS\HttpCacheBundle\Command\ClearCommand;
use Mockery\Adapter\Phpunit\MockeryPHPUnitIntegration;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Tester\CommandTester;

class ClearCommandTest extends TestCase
{
    use MockeryPHPUnitIntegration;

    public function testExecuteClear()
    {
        $invalidator = \Mockery::mock(CacheManager::class)
            ->shouldReceive('supports')->once()->with(CacheInvalidator::CLEAR)->andReturnTrue()
            ->shouldReceive('clearCache')->once()
            ->getMock()
        ;

        $application = new Application();
        $application->add(new ClearCommand($invalidator));

        $command = $application->find('fos:httpcache:clear');
        $commandTester = new CommandTester($command);
        $commandTester->execute([
            'command' => $command->getName(),
        ]);

        // the only output should be generated by the listener in verbose mode
        $this->assertEquals('dddd', $commandTester->getDisplay());
    }

    public function testExecuteInvalidate()
    {
        $invalidator = \Mockery::mock(CacheManager::class)
            ->shouldReceive('supports')->once()->with(CacheInvalidator::CLEAR)->andReturnFalse()
            ->shouldReceive('supports')->once()->with(CacheInvalidator::INVALIDATE)->andReturnTrue()
            ->shouldReceive('invalidateRegex')->once()->with('.*')
            ->getMock()
        ;

        $application = new Application();
        $application->add(new ClearCommand($invalidator));

        $command = $application->find('fos:httpcache:clear');
        $commandTester = new CommandTester($command);
        $commandTester->execute([
            'command' => $command->getName(),
        ]);

        // the only output should be generated by the listener in verbose mode
        $this->assertEquals('', $commandTester->getDisplay());
    }

    public function testExecuteNotSupported()
    {
        $invalidator = \Mockery::mock(CacheManager::class)
            ->shouldReceive('supports')->once()->with(CacheInvalidator::CLEAR)->andReturnFalse()
            ->shouldReceive('supports')->once()->with(CacheInvalidator::INVALIDATE)->andReturnfalse()
            ->getMock()
        ;

        $application = new Application();
        $application->add(new ClearCommand($invalidator));

        $command = $application->find('fos:httpcache:clear');
        $commandTester = new CommandTester($command);
        $commandTester->execute([
            'command' => $command->getName(),
        ]);

        $this->assertStringContainsString(
            'The configured HTTP cache does not support "clear" or "invalidate".',
            $commandTester->getDisplay()
        );
    }
}
